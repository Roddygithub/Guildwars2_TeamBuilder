#!/usr/bin/env python3
"""
G√©n√©rateur de cl√© secr√®te s√©curis√©e pour les environnements de production.

Ce script g√©n√®re une cl√© al√©atoire s√©curis√©e qui peut √™tre utilis√©e comme SECRET_KEY
pour les applications Django, Flask ou autres applications web.
"""
import secrets
import string

def generate_secret_key(length=50):
    """G√©n√®re une cl√© secr√®te al√©atoire s√©curis√©e.
    
    Args:
        length (int): Longueur de la cl√© √† g√©n√©rer. Par d√©faut √† 50 caract√®res.
        
    Returns:
        str: Une cha√Æne de caract√®res al√©atoires s√©curis√©e.
    """
    # Caract√®res possibles pour la cl√© secr√®te
    chars = string.ascii_letters + string.digits + string.punctuation
    
    # Suppression des caract√®res qui pourraient poser probl√®me dans les variables d'environnement
    for char in '\'"`${}()[]<>|&;':
        chars = chars.replace(char, '')
    
    # G√©n√©ration de la cl√©
    return ''.join(secrets.choice(chars) for _ in range(length))

def update_netlify_config(secret_key):
    """Met √† jour le fichier netlify.toml avec la nouvelle cl√© secr√®te.
    
    Args:
        secret_key (str): La cl√© secr√®te √† ins√©rer dans la configuration.
    """
    import os
    import re
    
    # Chemin vers le fichier netlify.toml
    netlify_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'netlify.toml')
    
    try:
        # Lire le contenu actuel
        with open(netlify_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # √âchapper les caract√®res sp√©ciaux pour l'expression r√©guli√®re
        secret_key_escaped = re.escape(secret_key)
        
        # Remplacer la cl√© secr√®te existante ou l'ajouter si elle n'existe pas
        if 'SECRET_KEY = ' in content:
            new_content = re.sub(
                r'SECRET_KEY\s*=\s*"[^"]*"',
                f'SECRET_KEY = "{secret_key}"',
                content
            )
        else:
            # Trouver la section [build.environment] et ajouter la cl√© secr√®te
            if '[build.environment]' in content:
                new_content = content.replace(
                    '[build.environment]',
                    f'[build.environment]\n  SECRET_KEY = "{secret_key}"',
                    1
                )
            else:
                # Si la section n'existe pas, l'ajouter √† la fin du fichier
                new_content = f"{content}\n\n[build.environment]\n  SECRET_KEY = \"{secret_key}\""
        
        # √âcrire le nouveau contenu
        with open(netlify_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
            
        print(f"‚úÖ Cl√© secr√®te g√©n√©r√©e et ajout√©e √† {netlify_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour du fichier netlify.toml : {e}")
        return False

if __name__ == "__main__":
    print("\nüîë G√©n√©ration d'une cl√© secr√®te s√©curis√©e...")
    
    # G√©n√©rer une cl√© secr√®te
    secret_key = generate_secret_key()
    
    print(f"\nVotre nouvelle cl√© secr√®te est :\n{secret_key}")
    
    # Mettre √† jour le fichier netlify.toml
    if update_netlify_config(secret_key):
        print("\n‚úÖ Configuration mise √† jour avec succ√®s !")
        print("\n‚ö†Ô∏è  Assurez-vous de ne pas partager cette cl√© et de la garder secr√®te !")
        print("   Cette cl√© est utilis√©e pour s√©curiser les sessions et les tokens d'authentification.")
    else:
        print("\n‚ùå Une erreur est survenue lors de la mise √† jour de la configuration.")
        print("   Veuillez ajouter manuellement la cl√© secr√®te √† votre fichier netlify.toml :")
        print(f"   SECRET_KEY = \"{secret_key}\"")
    
    print("\n‚ú® Op√©ration termin√©e !")
