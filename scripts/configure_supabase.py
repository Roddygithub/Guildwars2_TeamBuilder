#!/usr/bin/env python3
"""
Script de configuration de Supabase pour Guild Wars 2 Team Builder.

Ce script permet de configurer automatiquement un projet Supabase avec les param√®tres n√©cessaires.
"""
import os
import sys
import json
import argparse
from pathlib import Path
from typing import Dict, Any, Optional
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def load_config(config_path: str) -> Dict[str, Any]:
    """Charge le fichier de configuration Supabase.
    
    Args:
        config_path: Chemin vers le fichier de configuration.
        
    Returns:
        Un dictionnaire contenant la configuration.
    """
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"Le fichier de configuration {config_path} n'existe pas.")
        sys.exit(1)
    except json.JSONDecodeError as e:
        logger.error(f"Erreur de syntaxe dans le fichier de configuration: {e}")
        sys.exit(1)

def update_env_file(env_path: str, config: Dict[str, Any]) -> None:
    """Met √† jour le fichier .env avec les informations de configuration.
    
    Args:
        env_path: Chemin vers le fichier .env
        config: Dictionnaire de configuration
    """
    # Lire le contenu actuel du fichier .env s'il existe
    env_lines = []
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            env_lines = f.readlines()
    
    # Mettre √† jour ou ajouter les variables d'environnement
    env_vars = {
        'SUPABASE_URL': config['supabase']['project_url'],
        'SUPABASE_ANON_KEY': config['supabase']['public_anon_key'],
        'SUPABASE_JWT_SECRET': config['supabase']['jwt_secret'],
        'DATABASE_URL': f"postgresql://{config['database']['user']}:{config['database']['password']}@{config['database']['host']}:{config['database']['port']}/{config['database']['name']}",
        'SUPABASE_SERVICE_ROLE': config.get('supabase', {}).get('service_role_key', 'your-service-role-key')
    }
    
    # Mettre √† jour les variables existantes ou les ajouter
    updated_vars = set()
    for i, line in enumerate(env_lines):
        if '=' in line:
            var_name = line.split('=')[0].strip()
            if var_name in env_vars:
                env_lines[i] = f"{var_name}={env_vars[var_name]}\n"
                updated_vars.add(var_name)
    
    # Ajouter les variables manquantes
    for var_name, var_value in env_vars.items():
        if var_name not in updated_vars:
            env_lines.append(f"{var_name}={var_value}\n")
    
    # √âcrire le fichier .env mis √† jour
    with open(env_path, 'w', encoding='utf-8') as f:
        f.writelines(env_lines)
    
    logger.info(f"Fichier {env_path} mis √† jour avec succ√®s")

def update_netlify_config(netlify_path: str, config: Dict[str, Any]) -> None:
    """Met √† jour le fichier de configuration Netlify.
    
    Args:
        netlify_path: Chemin vers le fichier netlify.toml
        config: Dictionnaire de configuration
    """
    if not os.path.exists(netlify_path):
        logger.warning(f"Le fichier {netlify_path} n'existe pas, cr√©ation...")
        with open(netlify_path, 'w', encoding='utf-8') as f:
            f.write("[build]\n")
    
    # Lire le contenu actuel du fichier netlify.toml
    with open(netlify_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # V√©rifier si la section [build.environment] existe
    env_section_start = -1
    env_section_end = -1
    for i, line in enumerate(lines):
        if line.strip() == '[build.environment]':
            env_section_start = i
        elif env_section_start != -1 and line.startswith('[') and line.strip() != '':
            env_section_end = i
            break
    
    # Pr√©parer les variables d'environnement pour Netlify
    env_vars = {
        'DATABASE_URL': f"postgresql://{config['database']['user']}:{config['database']['password']}@{config['database']['host']}:{config['database']['port']}/{config['database']['name']}",
        'SUPABASE_URL': config['supabase']['project_url'],
        'SUPABASE_ANON_KEY': config['supabase']['public_anon_key'],
        'SUPABASE_JWT_SECRET': config['supabase']['jwt_secret'],
        'ENVIRONMENT': 'production',
        'NODE_VERSION': '18',
        'NPM_FLAGS': '--legacy-peer-deps',
        'YARN_VERSION': '1.22.19',
        'YARN_FLAGS': '--network-timeout 60000',
        'NEXT_TELEMETRY_DISABLED': '1',
        'NODE_OPTIONS': '--max_old_space_size=4096'
    }
    
    # Cr√©er ou mettre √† jour la section [build.environment]
    env_section = ['[build.environment]\n']
    for key, value in env_vars.items():
        env_section.append(f'  {key} = "{value}"\n')
    
    # Mettre √† jour ou ajouter la section [build.environment]
    if env_section_start != -1:
        # Mettre √† jour la section existante
        if env_section_end == -1:
            env_section_end = len(lines)
        
        # Supprimer les lignes existantes de la section
        del lines[env_section_start:env_section_end]
        
        # Ins√©rer les nouvelles lignes
        lines[env_section_start:env_section_start] = env_section
    else:
        # Ajouter une nouvelle section √† la fin du fichier
        lines.extend(['\n'] + env_section)
    
    # √âcrire le fichier netlify.toml mis √† jour
    with open(netlify_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    logger.info(f"Fichier {netlify_path} mis √† jour avec succ√®s")

def generate_secret_key() -> str:
    """G√©n√®re une cl√© secr√®te s√©curis√©e.
    
    Returns:
        Une cha√Æne de caract√®res al√©atoire s√©curis√©e.
    """
    import secrets
    import string
    
    alphabet = string.ascii_letters + string.digits + "-._~"
    return ''.join(secrets.choice(alphabet) for _ in range(64))

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description='Configure Supabase pour Guild Wars 2 Team Builder')
    parser.add_argument(
        '--config',
        type=str,
        default='supabase-config.json',
        help='Chemin vers le fichier de configuration Supabase (d√©faut: supabase-config.json)'
    )
    parser.add_argument(
        '--env',
        type=str,
        default='.env',
        help='Chemin vers le fichier .env (d√©faut: .env)'
    )
    parser.add_argument(
        '--netlify',
        type=str,
        default='netlify.toml',
        help='Chemin vers le fichier netlify.toml (d√©faut: netlify.toml)'
    )
    parser.add_argument(
        '--generate-secret',
        action='store_true',
        help='G√©n√®re une nouvelle cl√© secr√®te pour JWT'
    )
    
    args = parser.parse_args()
    
    # Charger la configuration
    config = load_config(args.config)
    
    # G√©n√©rer une nouvelle cl√© secr√®te si demand√©
    if args.generate_secret:
        new_secret = generate_secret_key()
        config['supabase']['jwt_secret'] = new_secret
        logger.info(f"Nouvelle cl√© secr√®te JWT g√©n√©r√©e: {new_secret}")
    
    # Mettre √† jour les fichiers de configuration
    update_env_file(args.env, config)
    update_netlify_config(args.netlify, config)
    
    logger.info("Configuration termin√©e avec succ√®s!")
    
    # Afficher les informations de connexion
    print("\nüîë Informations de configuration :")
    print(f"URL du projet Supabase: {config['supabase']['project_url']}")
    print(f"Cl√© anonyme: {config['supabase']['public_anon_key']}")
    print(f"H√¥te de la base de donn√©es: {config['database']['host']}")
    print(f"Utilisateur de la base de donn√©es: {config['database']['user']}")
    print(f"Nom de la base de donn√©es: {config['database']['name']}")
    
    # Avertissement concernant la s√©curit√©
    print("\n‚ö†Ô∏è IMPORTANT: Assurez-vous de ne pas partager ces informations sensibles!")
    print("  - Le fichier .env est dans .gitignore pour des raisons de s√©curit√©")
    print("  - Ne partagez jamais les cl√©s secr√®tes ou les mots de passe")
    print("  - R√©g√©n√©rez les cl√©s si elles sont compromises")

if __name__ == "__main__":
    main()
